
*** JQUERY - AJAX OVERVIEW ***

Ajax:
- Asynchronous JavaScript and XML
- send & retrieve data from a server asynchronously without interfering with page display
    + Retrieving data -> XMLHttpRequest object (JSON)


JSON:
- JavaScript Object Notation
- data-interchange format
- USE: in cloud based services and APIs
- Object literal and array literal notations used in JSON
    {}      empty object in json form
    []      empty array in json form

- Object properties in JSON must be double-quoted strings, and properties are separated by a commas
    {
        "name1": "value1",
        "name2": "value2"
    }

- The value of a property can be one of the following:
  A quoted string
  A number
  An object
  An array
  true or false
  null

- example utilizing all the possible types:
    {
        "stringProp": "stringValue",
        "numberProp": 1,
        "objectProp": {
            "prop": "value"
        },
        "arrayProp" : ["item1", "item2"],
        "arrayOfObjectsProp" : [
            {
                "prop": "value"
            },
            {
                "prop": "value"
            }
        ],
        "boolProp"  : true,
        "nullProp"  : null
    }

- For More: https://www.json.org/json-en.html



*** JQUERY - REQUESTS ***

Request:
- communicate with a server
- information is changed without refreshing the entire view
- this provides a very rich user experience


Basic Request:
    $.ajax("/some-url")
- $.ajax() accepts a JavaScript object of additional options as a second argument


Ajax Request Options:
    $.ajax("/some-url", {
        type: "POST",
        data: {
            name:     "John",
            location: "Boston"
        }
    });

type: "GET",        type of HTTP request to send to the server ("GET", "POST", "PUT", or "DELETE")
data: {..},         data included with the request, either in the url (GET) or behind the scenes
dataType: "json",   type of data we expect from server ("json", "xml", "html", or "text")
url                 specify where to send the request
username/password   specify server username and password if required
headers: {...},     an object of whose key value pairs represent custom HTTP headers to send along with the request



*** JQUERY - RESPONSES ***

Handling Responses:
- Ajax requests are done asynchronously
- the request is fired off when we call $.ajax()
- JavaScript does not sit and wait for the response
- the server could take 1/2 sec or 1/2 minute!
- we must explicitly specify a function to be called once the response has come back

    $.get('https://pokeapi.co/api/v2/pokemon/charmander').done(function(data) {
        console.log(data);
    })


Callback function:
- a function that we create to be called when some process completes
- attach a callback to your Ajax request using .done() at the end of your request and pass your callback into it

    $.ajax("/some-url").done(function(data, status, jqXhr) {
        alert("AJAX call completed successfully!");
        console.log("Request status: " + status);
        console.log("Data returned from server:");
        console.log(data);
    });


Return Data:
- jQuery tries to guess data type sent by server
    JSON        returns an object
    text        returns a string
    dataType    force return data type


Callback Methods:
- three different methods you can use to specify callback functions for an Ajax request
    .done       calls when the request completes successfully
    .fail       calls when a request completed with an error (e.g. the server sent back a 404)
    .always     calls for both failed and successful requests


.done():
- a method that accepts a callback function as an argument
- calls once the Ajax request has come back successfully
- takes 3 arguments (data, status, jqXhr)
    data        the body of the response from the server *use this*
    status      a string indicating the status of the request
    jqXhr       a jQuery object that represents the Ajax request


.fail():
- takes 3 arguments
    jqXhr       a jQuery object that represents the Ajax request
    status      a string representing the status of the request
    error       n object that represents the error that occurred, if any


.always()
- called with the same arguments that were passed to either the .done callback, or the .fail callback
- depending on whether the request was successful or not


Combining all 3 callbacks:
- .done() and .fail() are mutually exclusive, so there should never be a case where both are called
    $.ajax("/some-url").done(function(data, status, jqXhr) {
        alert("Everything went great! Check out the server's response in the console.");
        console.log(data);
    }).fail(function(jqXhr, status, error) {
        alert("There was an error! Check the console for details");
        console.log("Response status: " + status);
        console.log("Error object: " + error);
    }).always(function() {
        alert("This function always runs!");
    });


Organize combination callbacks:
    // Assign to variable
    var jqXhr = $.ajax("/some-url");

    // Attach callback functions individually
    jqXhr.done(function(data, status, jqXhr) {
        alert("Everything went great!");
    });

    jqXhr.fail(function(jqXhr, status, error) {
        alert("There was an error!");
    });

    jqXhr.always(function() {
        alert("And we're done!");
    });


Simplify Complex callbacks:
    function onSuccess(data, status, jqXhr) {
        // display the requested data to the user
    }

    function onFail(jqXhr, status, error) {
        // tell the user something went wrong, and to try again later
    }

    function stopLoadingAnimation() {
        // the request is no longer pending, hide the loading spinner
    }

    $.ajax("/some-url")
        .done(onSuccess)
        .fail(onFail)
        .always(stopLoadingAnimation);


GET & POST shorthand:
- jQuery includes a couple of shortcuts for relatively simple requests
- send a GET request to /users with the parameters limit: 10 and offset: 20 you can use the .get method like so:
    $.get("/users", {
        limit:  10,
        offset: 20
    }).done(function(data) {
        // do something with the data
    });

- send a POST request to /address/save with the data of first_name: George, last_name: Weathers, city: Denver,
  state: CO we could do:
    $.post("/address/save", {
        first_name: "George",
        last_name:  "Weathers",
        city:       "Denver",
        state:      "CO"
    }).done(function(data) {
        // do something with the response
    });


KEYS:
- most APIs will require the use of an App ID or API Key
- good practice to avoid pushing confidential information like API Keys
- create a separate keys.js file, for API keys
- add to.gitignore file that way it never gets pushed to a public repository
    const MAPBOX_KEY = 'pk.ASDQWE@#$';
    const OPEN_WEATHER_APPID = "2344ZXCERWETA";
    const LINKEDIN_KEY = "34234ASDAD45";