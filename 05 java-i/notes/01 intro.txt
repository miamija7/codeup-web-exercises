
*** JAVA I - INTRO ***

"Computer science is no more about computers than astronomy is about telescopes." - Edsger W. Dijkstra

Facts about Java:
- introduced in 1995 by James Gosling
- is an Object-Oriented language, objects are the primary method of composition in the language
- runs (almost) everywhere

Editions:
- Java comes in a number of different editions:
    + JavaSE (Standard Edition)
        - Contains the core functionality of the Java language
        - Provides facilities for networking, security, database access, GUI development, and XML parsing
        - Includes the JVM - Java Virtual Machine
        - development + deployment tools
    + JavaEE (Enterprise Edition)
        - Facilities for building large-scale enterprise-level applications
        - Contains the Servlet, JSP, and JDBC libraries, among others. We'll explore these more in the Java III section.
    + JavaFX
        - GUI applications
        - Merged into 1.8
    + JavaME
        - Java on mobile devices
    + Android
        - Applications are written in Java
        - Some differences from "traditional" Java


Components of Java:
- JKD (Java Development Kit)
    + JRE (Java Runtime Environment)
        - JVM (Java Virtual Machine
        - libraries and files for runtime
    + Development Tools
        - compiler
        - jar builder
        - documentation
- the JRE is necessary to run Java applications -> most end users will only have a JRE
- the JDK is necessary to create and build Java applications -> developers need JDK for accessing developer tools


Java vs JavaScript:
      JAVA      |    JAVASCRIPT
-----------------------------------
complied        |   interpreted
static typing   |   dynamic typing
object-oriented |   had objects
runs everywhere |   runs in browser


Compiling And Interpreting Code:
1.  Java source code is written in a .java file.
    This is plain-text, human-readable code.

2.  The source code is compiled.
    Next the .java file is compiled with the javac tool.

    While it is good to know about javac, practically speaking, you won't interact with it much directly.
    Rather, an IDE (like IntelliJ) or a build tool (like maven) will automate it's usage for you.

    The output of this step is a file with an extension of class. This file contains JVM Bytecode.
    This is a lower-level language that maps closely to specific instructions that a computer's processor executes.

    During this step, you will encounter compile-time errors (as opposed to run-time errors).
    These are errors will prevent the compiler from making sense of your source code. An example of a compile-time
    error is a syntax error.

3.  The compiled bytecode runs on the JVM.
    The JVM now interprets the bytecode, turning it into machine code (code that is read directly by a computer's
    processor). Machine code is different for every different type of computer processor. This means that the
    implementation of the JVM varies from environment to environment, but the bytecode that is run by the JVM
    is the same no matter what type of computer is running it.

    In this stage you will encounter run-time errors, as well as see the actual output of your program. Here we
    would use the java command line command to execute class files, but much like the compilation step, it is fairly
    rare to interact with the java command directly; rather, your IDE or build tool will both compile and run the
    code in one step.


Definitions:
com·pile
/kəmˈpīl/
convert (a program) into a machine-code or lower-level form in which the program can be executed


IDEs:
- While it is popular to write javascript (and other languages) with a lightweight text editor,
  IDEs are the de-facto standard for writing Java code. This is primarily due to the automation of
  the compile-run process, and rich autocompletion and code analysis tools. If you were previously
  using a program like Atom, Sublime Text, or Vim to edit your code, we would strongly suggest you
  switch to an IDE now. We'll use IntelliJ for this course.


