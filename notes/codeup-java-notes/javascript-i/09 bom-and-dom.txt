
*** JAVASCRIPT BOM & DOM ***


------- INTRO BOM & DOM -------

BOM: Browser Object Model
DOM: Document Object Model

Both are used to write JavaScript that modifies HTML/CSS and respond to events triggered by users.


------- BOM -------

Allows JavaScript to interact with the web browser.

Window Object:
- the core of the Browser Object Model
- represents an instance of the web browser
- controls the browsers size and position
- open pop-up windows
- display system dialogs
- run interval based processing
- represents the JavaScript Global object
- any variables or functions in the global scope become part of the window object

System Dialogs:
- alert(), confirm(), and prompt()
- these dialogs are provided by the browser
- made available through the window object
- window object represents the global JavaScript object so...
  the methods can be called directly without mentioning the window object

Intervals and Timeouts:
- execute code at a set interval of time
- execute code after a certain time interval has passed
- window object provides two methods:
    ~ setInterval(): code will continue executing at a specified time interval, until clearInterval() is called.
        setInterval(code)
        setInterval(code, delay)

        setInterval(func)
        setInterval(func, delay)
        setInterval(func, delay, arg0)
        setInterval(func, delay, arg0, arg1)
        setInterval(func, delay, arg0, arg1, /* … ,*/ argN)


        // this code will produce a console log every second
        // when count >= max, the interval is cancelled, and the logging will stop

        var count = 0;
        var max = 10;
        var interval = 1000; // interval time in milliseconds

        var intervalId = setInterval(function () {
            if (count >= max) {
                clearInterval(intervalId);
                console.log('All done');
            } else {
                count++;
                console.log('Repeating this line ' + count);
            }
        }, interval);

        // takes in a function and an interval (in ms)
        // returns intervalId
        // will continue to execute at interval until clearInterval() is called with the correct interval id


    ~ setTimeout(): code will execute after specified time interval has passed, executed only once
        setTimeout(code)
        setTimeout(code, delay)

        setTimeout(functionRef)
        setTimeout(functionRef, delay)
        setTimeout(functionRef, delay, param1)
        setTimeout(functionRef, delay, param1, param2)
        setTimeout(functionRef, delay, param1, param2, /* … ,*/ paramN)


        // this code will produce 1 alert after 5 seconds
        // to cancel the timeout, you can call
        // clearTimeout(timeoutId);
        // prior to the delay expiring

        var delay = 5000; // delay time in milliseconds

        var timeoutId = setTimeout(function () {
            alert('Here is a delayed hello!');
        }, delay);

        // takes in a function and an interval (in ms)
        // will execute one time at the end of the delay time
        // will execute unless clearTimeout(timeoutId); is returned by the setTimeout() method


Location:
- accessible though both the window object, and also the document object
- location object is aware of the currently loaded document
- provides detailed url information
- used to redirect the browser to a new location
- Actions:
    ~ location object       window.location = 'http://www.google.com';
    ~ reload object         location.reload();
    ~ navigator object      https://developer.mozilla.org/en-US/docs/Web/API/Navigator
    ~ history object        https://developer.mozilla.org/en-US/docs/Web/API/History





