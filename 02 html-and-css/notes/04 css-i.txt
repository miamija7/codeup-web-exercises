
*** CSS I ***

------- OVERVIEW -------

CSS:
- Cascading Style Sheets
- allows us to customize the presentation of a web page
- colors, fonts, layout, and more
- provides for the separation of the document content from the presentation


------- INTRO TO CSS -------

3 ways to apply css styles:
   1. Element Style Attribute
   2. Inline/Embedded Stylesheet
   3. External Stylesheet


Element Style:
    <h1 style="color:blue;text-decoration:underline;">Hello, CSS!</h1>


Inline/Embedded Stylesheet (inside head):
    <style>
        .fancy-header {
            color: blue;
            text-decoration: underline;
        }
    </style>


External Stylesheet (inside head):
- File: css/style.css
- File: index.html
    <link rel="stylesheet" href="css/style.css">


- Elements in adding a stylesheet in html
    link            a void element
    rel             specifies stylesheet
    href            path to stylesheet


Comments:
    /*...*/


------- CSS SELECTORS -------


Selectors:
- selectively apply styles to specific elements or groups of elements
- many types of CSS selectors
Selector	Syntax
Element	    The name of the element
ID	        The name of the id, preceded by a #
Class	    The name of the class, preceded by a


Basic Selectors:
    selector {
        property1: value;
        property2: value;
    }


Multiple Selectors:
    selector1, selector2 {
        property1: value;
        property2: value;
    }


Combination Classes:
    .fancy-header {
        color: blue;
    }
    .extra-large {
        font-size: 200px;
    }
    <h1 class="fancy-header extra-large">Header Text</h1>


Descendant Selector:
    #container h1 {
        color: blue;
    }


Direct-Child Selector:
    #container>h1 {
        color: blue;
    }


Combine Selectors:
    h1.fancy-header {
        color: blue;
    }
    h2.fancy-header {
        color: green;
    }


Pseudo Classes:
    selector:pseudo-class {
        property1: value;
        property2: value;
    }

    LINK EXAMPLE:
    /* unvisited link (:link) */
    a:link {
        color:red;
    }

    /* visited link (:visited) */
    a:visited {
        color:black;
    }

    /* mouse hover over link (:hover) */
    a:hover {
        color:blue;
    }

    /* active/selected link (:active) */
    a:active {
        color:green;
    }


Specificity
- cascading nature
- potential for duplicate styles or conflicting styles
- there must be a set of rules that determine what styles actually get applied
- The process of deciding what styles get applied is referred to as specificity.
- Rule of thumb:
    "In general, the more specific the selector,
     the higher the precedence, the more likely
     the style will be applied."


------- CSS PROPERTIES -------


Colors:
- HEX
    #FF0000 = red
    #00FF00 = green
    #0000FF = blue
    #000000 = black
    #FFFFFF = white
    #808080 = grey

    #F00 = #FF0000
    #ABC = #AABBCC
    #AAA = #AAAAAA


Useful Properties:
element { color: #F00; }                        color
element { text-decoration: underline; }         text-decoration
element { text-align: center; }                 text-align
element { text-indent: 40px; }                  test-indent
element { font-style: italic; }                 style
element { font-size: 12px; }                    size
element { font-size: 1em; }                     size
element { font-weight: bold; }                  font weight
element { background-color: #F00; }             background color
| element { background-image: url               background image
| ("http://www.example.com/images/bck.png"); }
element { background-repeat: repeat-x; }        background repeat
ol { list-style: upper-alpha; }                 list style
ul { list-style: square; }                      list style
| h2 { color: green; }                          inheriting styles
| #sidebar h2 { color: inherit; }



Font Family Properties:
element { font-family: Helvetica, Arial, Sans-Serif; }
element { font-family: "Times New Roman", Times, Serif; }
element { font-family: "Courier New", Monospace; }

- px: stands for pixels. Pixels are an absolute unit used for screen media.
- em: is a relative/dynamic unit that corresponds to the current font size.
  If the current font size is 12px, then 1em is 12px. 2em would be 24px. 0.5 em would be 6px.
  If the browser font size changes, all em values would change accordingly.


------- CSS Box Model -------


CSS Box Model:
- Every element in an HTML document is represented as a rectangular box
- CSS box properties:
    + height & width
    + padding
    + border
    + margin

    width: 200px;                   content width
    height: 200px;                  content height
    padding: 1px 3px 30px 5px;      padding between content and border (top + right + bottom + left)
    border: 1px solid black;        border (width + style + color)
    margin: 10px 3px 30px 5px;      margin beyond border, does not add to element size

- The overall size for the box of an element is calculated as follows:
    height = height + padding-top + padding-bottom + border-top + border-bottom
    width = width + padding-left + padding-right + border-left + border-right


Div/Span:
- content container
- without semantic meaning
- for the purpose of applying style
- <div>...</div>
    + generic container for flow content
    + block-level element
    + does not represent anything
    + used to group elements for styling purposes
    + use when no other semantic element (such as <article> or <nav>) is appropriate
- <span>...</span>
    + generic container for phrasing content
    + inline element
    + does not inherently represent anything
    + used to group elements for styling purposes
    + use when no other semantic element is appropriate


------- CSS Positioning -------

Static:
- the default positioning for elements
- elements will be rendered in order with the normal document flow


Floating:
- have an element break free from the normal document flow and shift to the left or right as far as possible
- text and other inline elements can flow around it
    float: left;
    float: right;

Clear:
- allows us to have content "clear" or move below elements that are floated to either the left, right, or both
    clear: left;
    clear: right;
    clear: both;

Position:
- modify position
- top, left, bottom, and right
- Relative Positioning:
    position:relative;
    + enables the top, left, bottom, right properties
    + top:10px and right:10px will shift the element down 10px, and to the left 10px in the div!
- Absolute Positioning:
    position:absolute;
    + enables the top, left, bottom, right properties
    + top:10px and right:10px will place the element 10px from the top-right corner of the div!
- Fixed Position:
    position:fixed;
    + enables the top, left, bottom, right properties
    + top:10px and right:10px places the element 10px away from the top right corner of the browser!


------- Flexbox Fundamentals -------

Flexbox:
- Flexible Box Module
- provides a convenient way to arrange the layout of elements inside a parent container


To start using flexbox:
    {
        display: flex;
    }
    - Items display in a row (flex-direction is row).
    - The items do not stretch on the main axis, but can shrink.
    - The items will stretch to fill the size of the cross axis.
    - The flex-basis property is set to auto.
    - The flex-wrap property is set to nowrap



Flex Direction:
    {
        flex-direction: row;
        flex-direction: row-reverse;
    }
                   ^         (Main-Axis)
                 <-|--------------------------------->
                   |
     (Cross-Axis)  |
                   v


    {
        flex-direction: column;
        flex-direction: column-reverse;
    }
                   ^         (Cross-Axis)
                 <-|--------------------------------->
                   |
      (Main-Axis)  |
                   v


Justify Content (Main Axis):
    {
        justify-content: flex-start;
        justify-content: flex-end;
        justify-content: center;
        justify-content: space-between;
        justify-content: space-around;
        justify-content: space-evenly;
    }


Align Items (Cross Axis):
    {
        align-items: normal;
        align-items: stretch;
        align-items: center;
        align-items: start;
        align-items: end;
        align-items: flex-start;
        align-items: flex-end;
        align-items: baseline;
    }


Flex Wrap:
    {
        flex-wrap: nowrap;
        flex-wrap: wrap;
        flex-wrap: wrap-reverse;
    }


Align Content:
    {
        align-content: flex-start;
        align-content: center;
        align-content: space-evenly;
        align-content: space-between;
    }


Flex Item Properties:
- In addition to setting the properties a parent / flex container, several properties can be set
  on individual flex items to control their positioning within a row or column.
- Order:
    + First flex item has an order value of 1
    + First flex item has an order value of -1
- Align Self:
    + cross axis alignment


https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout




