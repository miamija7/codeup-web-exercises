
*** CSS II ***

------- OVERVIEW -------

- fixed layout: the layout is specified in hardcoded pixel values
- fluid layout: the layout is specified in percentages, but does not change based on screen size
- responsive layout: the layout uses media queries to change based on screen size


------- MEDIA QUERIES -------

Responsive Web Design:
- RWD
- crafting sites to provide an optimal viewing experience
- easy reading, navigation, minimum resizing, panning, and scrolling
- from desktop computer monitors to mobile phones
- coined by Ethan Marcotte in 2010


Setting the Viewport:
- viewport meta tag instructs the page to match the screen's width
    <meta name="viewport" content="width=device-width, initial-scale=1">


Media Queries:
- the most important tool in your belt when it comes to building a responsive website
- make changes based on the pixel width of the viewable area

    /* screen sizes 500px and up */
    @media screen and (min-width:500px) {
        selector {
            property: value;
        }
    }

    /* screen sizes between 960px and 1200px */
    @media screen and (min-width:960px) and (max-width:1200px) {
        /* ... */
    }


Breakpoints:
- referred to as major resolution changes
- specified with media queries
- use popular device configurations
- layout elements are broken and repositioned

    /* Small devices (phones and pocket devices, 576 and up) */
    @media screen and (min-width:576px) { /* ... */ }

    /* Medium devices (tablets, 768px and up) */
    @media screen and (min-width:768px) { /* ... */ }

    /* Large devices (desktops, 992px and up) */
    @media screen and (min-width:992px) { /* ... */ }

    /* Extra large devices (large desktops, 1200px and up) */
    @media screen and (min-width:1200px) { /* ... */ }


Mobile First Approach:
- writing your default styling for a mobile device
- use media queries to change the layout based on larger devices
- support mobile and build up from there
- larger first complicates as you break a design down to fit
* CSS px !== device px
    + device-width media query measures the width of the device in device pixels
    + width media query measures the total width of the page in CSS pixels

    Q: What is a layout viewport?
    A: Itâ€™s the area (in CSS pixels) that the browser uses to calculate the dimensions
       of elements with percent-ual width, the width of this layout viewport is constrained
       to the device width in device pixels.

       Nexus screen size = 480px, but when you apply the <meta> tag it acts as if the screen
       width is 320px, 2/3rds of the official width.

       dips; device-independent pixels

* @media Rule
    + The @media at-rule may be placed at the top level of your code or nested inside
      any other conditional group at-rule.


------- BOOTSTRAP -------

Bootstrap:
- formerly Twitter Bootstrap
- a front-end framework that provides CSS styling along with some JavaScript
- build responsive web pages quickly and easily


Including Bootstrap:
- use a CDN (Content Delivery Network) to include Bootstrap on our page
- we will be using jsDelivr
- link element that points to Bootstrap
- https://getbootstrap.com/docs/5.1/getting-started/introduction/ keeps it up to date
- include Bootstrap before we include our own CSS, so we can override as desired
- you can also download Bootstrap and host it yourself


Grid System:
- Bootstrap comes with a responsive 12-column grid system that we can use to layout various screen sizes.
- col-(sm, md, lg, or xl)-(1-12)

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                Content goes here....
            </div>
        </div>
    </div>

    - We'll start by putting all of our content in a container, then define a row, which will contain multiple columns.
    - The content in the div with the class of col-md-6 will take up 6 columns (i.e. 50% width) on any medium or larger
      sized screen. On screens smaller than medium, the content will take up the full width.

    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-6">
                <p>Consectetur reprehenderit magnam nostrum quod reprehenderit. Inventore repellat eum facilis illum dolor doloribus, eius quibusdam suscipit delectus vitae. Explicabo beatae vitae quos laborum expedita hic, maiores ipsa eaque? Nobis repudiandae!</p>
            </div>
            <div class="col-lg-3 col-md-6">
                <p>Elit rerum asperiores nostrum ipsum sint debitis et, quos harum. Ut reiciendis id dolorem dolorum ad ex in. Illo odit atque dolore corporis vero? Voluptatum cupiditate quisquam perspiciatis obcaecati neque.</p>
            </div>
            <div class="col-lg-3 col-md-6">
                <p>Sit quibusdam dolorum delectus ducimus consequatur ullam cupiditate quia sit, laboriosam distinctio distinctio est blanditiis vitae laudantium dolore? Tempore doloremque aspernatur repellat consectetur sit vero velit possimus suscipit? Odit doloremque?</p>
            </div>
            <div class="col-lg-3 col-md-6">
                <p>Consectetur doloribus dolor quia iste sint! Totam suscipit possimus deserunt adipisci beatae? Mollitia explicabo voluptates hic delectus voluptates commodi necessitatibus perferendis. Rem ipsam itaque illo perspiciatis illo doloribus. Enim iste.</p>
            </div>
        </div>
    </div>

    - In the above example, each paragraph of latin text will take up 3 columns (one quarter) on large screens,
      6 columns (one half) on medium-sized screens, and 12 columns (full width) on anything smaller than a
      medium screen.