
*** JAVASCRIPT II - PROMISES NOTES ***

Promises:
- a tool for handling asynchronous events in JavaScript
- a promise represents an event that might not yet have happened
- three states:

pending         the event has not yet happened
resolved        the event has happened successfully
rejected        the event has happened, and an error condition occurred


Fetch API:
- then            accepts a callback that will run when the promise is resolved.
- catch           accepts a callback that will run when the promise is rejected.
    fetch('https://api.github.com/users')
    .then(response => console.log(response))
    .catch(error => console.error(error));


Using Promises:
- Promise.all         accepts an array of promises, and resolves when all the individual promises have resolved.
- Promise.race        accepts an array of promises, and resolves when the first promise resolves
    const githubPromise = fetch('https://api.github.com/repositories');
    const bitbucketPromise = fetch('https://api.bitbucket.org/2.0/repositories');

    Promise.all([githubPromise, bitbucketPromise])
        .then(function(data) {
            // here data is an array of the resolved values from each promise
            // we can now do something with both pieces of data
        })
        .catch(function(error) {
            // handle errors
        }
    );


 Chaining:
    Promise.resolve('one').then((one) => {
        console.log(one);
        return 'two';
    }).then((two) => {
        console.log(two);
        return 'three';
    }).then((three) => {
        console.log(three);
    });


 Custom Promises:
 - two functions: resolve and reject
 - .then and .catch callback functions

    const myPromise = new Promise((resolve, reject) => {
        setTimeout(() => {
            if (Math.random() > 0.5) {
                resolve();
            } else {
                reject();
            }
        }, 1500);
    });

    console.log(myPromise); // a pending promise

    myPromise.then(() => console.log('resolved!'));
    myPromise.catch(() => console.log('rejected!'));


Resolving Values:
- Let's write a promise that simulates an API request:

    function makeRequest() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (Math.random() > 0.1) {
                    resolve('Here is your data: ...');
                } else {
                    reject('Network Connection Error!');
                }
            }, 1500);
        });
    }

    const request = makeRequest();
    console.log(request); // pending promise
    request.then(message => console.log('Promise resolved!', message));
    // if resolved, will log "Promise resolved!" and "Here is your data: ..."
    request.catch(message => console.log('Promise rejected!', message));
    // if rejected, will log "Promise rejected!" and "Network Connection Error!"

    ^^
    Here we have a function that returns a promise that will either resolve or reject after one and a half seconds. Most of the time it will resolve, but one out of ten times it will "fail." (Hopefully the API you are talking to doesn't have such a high failure response rate!)

    Notice here that both the resolve and reject functions are being passed a value, and the callback functions supplied to .then and .catch will be passed the values that were passed to resolve and reject, respectively.

    We are using string literals here for the sake of simplicity, in a more complex, real-world situation, the promise would probably be resolved with a complex JSON object, or array of objects, and rejected with an error object.

